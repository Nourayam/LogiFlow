Final Integration Pass for Run-Ready Algorithm Visualisation Platform

You’re acting as a senior frontend engineer finalising the implementation of an educational React platform that visually simulates multiple algorithms, including Bubble Sort, Merge Sort, Quick Sort, BFS, DFS, and tree operations.

The project skeleton is complete. Your task is to ensure the entire system is **run-ready**, meaning the user can load the page, input data, select an algorithm, press play, and see accurate, smooth, animated output.

---

🎯 Objectives

- Finalise all wiring so the platform runs out-of-the-box without silent errors
- Ensure each algorithm generator returns frame-by-frame visual states
- Hook up user input correctly to algorithm selection
- Wire controls (play, pause, step, speed) to animation state and transitions
- Make visual output readable and aesthetically clean on load
- Sync animations and state progression cleanly
- Use British spelling in any labels, comments or variables

---

📁 Key Components

- `App.js`: Should fully orchestrate playback, frame progression, and component data flow
- `InputPanel.jsx`: Connect input array and dropdown to selected algorithm and trigger frame generation
- `Controls.jsx`: Buttons should alter `frameIndex`, with optional auto-play loop based on `isPlaying` and `speed`
- `Canvas.jsx`: Must correctly render visual elements and animate swaps/comparisons/traversals
- `Node.jsx`: Should apply highlight/swap/glow styles conditionally based on frame metadata
- `algorithms/*.js`: Ensure each returns a consistent frame schema and handles edge cases gracefully

---

📦 Frame Format Example

Each step must return a consistent object structure:

```js
{
  array: [...],                 // For sorting
  highlight: [i, j],            // Indices being compared
  swapped: true,                // If a swap occurred
  visited: [...],               // For BFS/DFS
  metadata: {...},              // Optional labels (e.g., sortedUntil)
}
```

These frames must drive the visualisation canvas without conflict or missing data.

---

🎨 Style & UX Goals

- Responsive layout that centres canvas and separates controls from clutter
- Animation timing based on `speed` state (e.g. 300ms to 1500ms)
- Control panel should display “Step X of Y”
- Input panel validates and parses arrays properly
- Visual states animate: comparisons pulse, swaps glow, sorted elements fade gently

---

🧪 Developer Notes

- Ensure `App.js` uses hooks cleanly: `useState`, `useEffect`, etc.
- Add fallback handling for invalid input or empty array
- Algorithm modules should have pure logic and no side effects
- Use comments with British spelling
- Prefer `className` logic over inline styles for styling transitions

---

This project is designed to be educational, modular, and visually elegant. Please ensure the system is cohesive, responsive, and free of runtime faults. Refactor or fill in implementation gaps as needed to ensure visual playback functions immediately.
```
