# Algorithm Visualizer: Overview and Setup Guide

## What This Program Provides

This is an interactive algorithm visualization tool that helps you understand how different algorithms work by showing their step-by-step execution. It currently supports:

1. **Sorting Algorithms**:
   - Bubble Sort
   - Merge Sort
   - Quick Sort

2. **Graph Algorithms**:
   - Breadth-First Search (BFS)
   - Depth-First Search (DFS)

3. **Tree Operations**:
   - Binary Tree operations

Key features:
- Visual step-by-step execution with highlighted elements
- Play/pause controls and adjustable speed
- Detailed descriptions of each step
- Algorithm information including time/space complexity
- Random input generation
- Export/import visualization state

## Steps to Run the Application

### Prerequisites
1. Node.js (v14 or higher) installed on your system
2. npm (comes with Node.js) or yarn

### Installation Steps

1. **Clone the repository** (if you haven't already):
   ```bash
   git clone [repository-url]
   cd AlgorVis
   ```

2. **Install dependencies**:
   ```bash
   npm install
   # or if using yarn
   yarn install
   ```

3. **Run the development server**:
   ```bash
   npm start
   # or if using yarn
   yarn start
   ```

4. **Open the application**:
   The application should automatically open in your default browser at `http://localhost:3000`. If it doesn't, you can manually navigate to this address.

### Using the Application

1. **Select an algorithm** from the dropdown menu
2. **Enter input values** (comma-separated numbers) or click "Randomize"
3. **Click "Visualize"** to start the visualization
4. **Control the visualization**:
   - Play/Pause: Spacebar or ⏵/⏸ button
   - Step Forward/Backward: Arrow keys or buttons
   - Adjust speed with the slider
   - Reset to start over

### Additional Features

- **Export/Import**: Save your current visualization state or load a previous one
- **Keyboard shortcuts**:
  - Space: Play/Pause
  - Right Arrow: Next step
  - Left Arrow: Previous step

### Building for Production

To create an optimized production build:
```bash
npm run build
# or
yarn build
```

This will create a `build` folder with all the static files you can deploy to any web server.

## Project Structure

```
AlgorVis/
├── src/
│   ├── algorithms/          # Algorithm implementations
│   ├── components/          # React components
│   ├── utils/               # Utility functions
│   ├── App.js               # Main application component
│   └── index.css            # Global styles
├── public/                  # Static files
└── package.json             # Project configuration
```

The application is built with React and uses functional components with hooks for state management. The visualization works by generating "frames" at each step of the algorithm execution, which are then rendered sequentially.